version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5


parameters:
  delete-services:
    description: If true, deletes the Terraform resources in AWS.
    type: boolean
    default: false


workflows:
  build-deploy:
    when:
      not: << pipeline.parameters.delete-services >>
    jobs:
      - check-format-backend-files
      - lint-typescript-code
      - build-backend:
          requires:
            - check-format-backend-files
            - lint-typescript-code
      - check-format-terraform-code
      - lint-terraform-code
      - deploy-backend-and-infrastructure:
          requires:
            - build-backend
            - check-format-terraform-code
            - lint-terraform-code
      - build-and-deploy-frontend:
          requires:
            - deploy-backend-and-infrastructure

  delete-services:
    when: << pipeline.parameters.delete-services >>
    jobs:
      - terraform-destroy


jobs:
  check-format-backend-files:
    docker:
      - image: cimg/node:22.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Check file formatting
          command: |
            cd backend
            npm run check-format

  lint-typescript-code:
    docker:
      - image: cimg/node:22.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Lint TypeScript code
          command: |
            cd backend
            npm run lint

  build-backend:
    docker:
      - image: cimg/node:22.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compile code
          command: |
            cd backend
            npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend/build

  check-format-terraform-code:
    docker:
      - image: hashicorp/terraform:1.9
    steps:
      - checkout
      - run:
          name: Install make
          command: apk add make
      - run:
          name: Check format of Terraform code
          command: make check-format-terraform

  lint-terraform-code:
    docker:
      - image: cimg/base:2024.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
            make lint-init-terraform
      - run:
          name: Lint Terraform code
          command: make lint-terraform
#aws s3 sync build s3://pnp-character-application-frontend --region eu-central-1
  build-and-deploy-frontend:
    docker:
      - image: cimg/node:22.10
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: "$AWS_ROLE_ARN"
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Prepare cache restoring
          command: |
            cd ~/project
            PREVIOUS_COMMIT=$(git rev-parse HEAD^)
            echo "Saving previous commit hash:"
            echo "$PREVIOUS_COMMIT" | tee cachekey
      - restore_cache:
          keys:
            - frontend-cache-{{ .Branch }}-{{ checksum "./cachekey" }}
      - run:
          name: build frontend
          command: |
            cd frontend
            chmod +x build_on_change.sh
            ./build_on_change.sh ${CIRCLE_BRANCH} {{ checksum "../cachekey" }}
            if [ -d "build" ]; then
              aws s3 sync build s3://pnp-character-application-frontend --region eu-central-1
            fi
            echo "Saving current commit hash:"
            echo $CIRCLE_SHA1 | tee ../commit
      - save_cache:
          key: frontend-cache-{{ .Branch }}-{{ checksum "./commit" }}
          paths:
            - frontend/checksum.txt

  # https://developer.hashicorp.com/terraform/tutorials/automation/circle-ci
  deploy-backend-and-infrastructure:
    docker:
      - image: hashicorp/terraform:1.9
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - aws-cli/setup:
          role_arn: "$AWS_ROLE_ARN"
      - run:
          name: Terraform init
          command: |
            cd terraform
            terraform init -input=false
      - run:
          name: Terraform plan
          command: |
            cd terraform
            terraform plan -out tfapply
      - run:
          name: Terraform apply
          command: |
            cd terraform
            terraform apply -auto-approve tfapply

  terraform-destroy:
    docker:
      - image: hashicorp/terraform:1.9
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: "$AWS_ROLE_ARN"
      - run:
          name: Terraform init
          command: |
            cd terraform
            terraform init -input=false
      - run:
          name: Terraform plan destroy
          command: |
            cd terraform
            terraform plan -destroy -out tfdestroy
      - run:
          name: Terraform destroy
          command: |
            cd terraform
            terraform apply -auto-approve tfdestroy
